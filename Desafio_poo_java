// Descrição do Desafio

Desmistifique a Programação Orientada a Objetos (POO) com Java e pratique esse conceito fundamental nesse desafio. 
Para isso, os pilares da OO são devidamente formalizados: Abstração, Encapsulamento, Herança e Polimorfismo. 
Neste desafio,você poderá desenvolver sua capacidade de abstração com um problema real e 
implementar as evoluções que achar interessantes //

// Classe abstrata Funcionario
public abstract class Funcionario {
    private String nome;
    private double salario;

    public Funcionario(String nome, double salario) {
        this.nome = nome;
        this.salario = salario;
    }

    public String getNome() {
        return nome;
    }

    public double getSalario() {
        return salario;
    }

    public void setSalario(double salario) {
        if (salario > 0) {
            this.salario = salario;
        } else {
            System.out.println("Salário inválido");
        }
    }

    public abstract void calcularPagamento();
}

// Classe Gerente, que herda de Funcionario
public class Gerente extends Funcionario {
    private double bonus;

    public Gerente(String nome, double salario, double bonus) {
        super(nome, salario);
        this.bonus = bonus;
    }

    public double getBonus() {
        return bonus;
    }

    public void setBonus(double bonus) {
        if (bonus >= 0) {
            this.bonus = bonus;
        } else {
            System.out.println("Bônus inválido");
        }
    }

    public void calcularPagamento() {
        double pagamento = getSalario() + bonus;
        System.out.println("Pagamento do gerente " + getNome() + ": " + pagamento);
    }
}

// Classe Desenvolvedor, que herda de Funcionario
public class Desenvolvedor extends Funcionario {
    private String linguagem;

    public Desenvolvedor(String nome, double salario, String linguagem) {
        super(nome, salario);
        this.linguagem = linguagem;
    }

    public String getLinguagem() {
        return linguagem;
    }

    public void setLinguagem(String linguagem) {
        this.linguagem = linguagem;
    }

    public void calcularPagamento() {
        System.out.println("Pagamento do desenvolvedor " + getNome() + ": " + getSalario());
    }
}

// Classe Designer, que herda de Funcionario
public class Designer extends Funcionario {
    private String especialidade;

    public Designer(String nome, double salario, String especialidade) {
        super(nome, salario);
        this.especialidade = especialidade;
    }

    public String getEspecialidade() {
        return especialidade;
    }

    public void setEspecialidade(String especialidade) {
        this.especialidade = especialidade;
    }

    public void calcularPagamento() {
        System.out.println("Pagamento do designer " + getNome() + ": " + getSalario());
    }
}

// Classe Main para testar o código
public class Main {
    public static void main(String[] args) {
        Funcionario gerente = new Gerente("João", 5000.0, 1000.0);
        Funcionario desenvolvedor = new Desenvolvedor("Maria", 3000.0, "Java");
        Funcionario designer = new Designer("Carlos", 2500.0, "UI/UX");

        gerente.calcularPagamento();
        desenvolvedor.calcularPagamento();
        designer.calcularPagamento();
    }
}

